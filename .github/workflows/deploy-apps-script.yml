name: Deploy to Google Apps Script

on:
  push:
    branches:
      - main # Or whichever branch you want to trigger the deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Or the latest version

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Or the latest version
        with:
          node-version: '18' # Specify your desired Node.js version

      - name: Install clasp
        run: npm install -g @google/clasp

      - name: Create .clasprc.json
        run: echo "${{ secrets.CLASPRC_JSON }}" > ~/.clasprc.json

      - name: Clasp Push
        run: clasp push -f # The -f flag forces the push, overwriting if necessary

      - name: Get Deployment ID (Optional but Recommended)
        id: get_deployment_id
        run: |
          # Attempt to get the latest deployment ID.
          # This assumes your latest deployment is the one you want to update.
          # You might need to adjust this if you have multiple deployments
          # or a specific deployment ID you always target.
          DEPLOYMENT_ID=$(clasp deployments | tail -n 1 | awk '{print $1}')
          if [[ -z "$DEPLOYMENT_ID" || "$DEPLOYMENT_ID" == "No" ]]; then
            echo "Could not automatically find deployment ID. Please create one manually and set it."
            # Optionally, you can create a new deployment here if none exists:
            # clasp deploy -d "Initial deployment from GitHub Actions"
            # DEPLOYMENT_ID=$(clasp deployments | tail -n 1 | awk '{print $1}')
            # If you still can't get it, you might need to hardcode it or pass as a secret.
            echo "::set-output name=deployment_id::YOUR_DEPLOYMENT_ID_HERE" # Fallback
          else
            echo "Found deployment ID: $DEPLOYMENT_ID"
            echo "::set-output name=deployment_id::$DEPLOYMENT_ID"
          fi
        # If you know your deployment ID, you can skip the above and uncomment the line below
        # echo "::set-output name=deployment_id::YOUR_ACTUAL_DEPLOYMENT_ID"

      - name: Clasp Deploy (Update Deployment)
        if: steps.get_deployment_id.outputs.deployment_id != 'YOUR_DEPLOYMENT_ID_HERE' && steps.get_deployment_id.outputs.deployment_id != ''
        run: clasp deploy -i ${{ steps.get_deployment_id.outputs.deployment_id }} -d "Automated deployment from GitHub Actions"
        # The -d flag provides a description for the new version.
        # The -i flag specifies the deployment ID to update.

      # If you always want to deploy to the latest version (HEAD deployment) and don't manage specific deployment IDs:
      # - name: Clasp Deploy (Create New Version for Head Deployment)
      #   run: clasp deploy --description "Automated deployment from GitHub Actions"
      # This creates a new version for the currently deployed "head" version.
      # This is simpler if you only use one deployment.